version: "3.8"
x-logging: &fluent-bit
  driver: fluentd
  options:
    fluentd-address: ${FLUENT_BIT_ADDRESS}:24224

services:
  tours:
    build: Tours/ # sam ce build-ovati prvi put, svaki drugi put ce koristiti postojecu sliku koju je build-ovao
    image: tours # naziv slike koju build-uje
    restart: always
    environment:
      DATABASE_URL: "host=toursdb user=postgres password=super dbname=SOA-tours sslmode=disable"
    networks:
      - database
    ports:
      - 8085:8085
    logging: *fluent-bit
    depends_on:
      - toursdb # pre pokretanja ovog kontejnera treba prvo da se pokrene baza

  toursdb:
    image: postgres
    container_name: tours-database
    networks:
      - database
    ports:
      - 5433:5432 # na pgAdmin-u se moze povezati na bazu na port 5433
    environment:
      - POSTGRES_DB=SOA-tours
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=super
    logging: *fluent-bit
    volumes:
      - tours-data:/var/lib/postgresql/data

  encounters:
    build: Encounters/ # sam ce build-ovati prvi put, svaki drugi put ce koristiti postojecu sliku koju je build-ovao
    image: encounters # naziv slike koju build-uje
    restart: unless-stopped
    container_name: "encounter-server"
    hostname: "encounter-server"
    environment:
      ENCOUNTER_SERVICE_ADDRESS: ${ENCOUNTER_SERVICE_ADDRESS}
      MONGO_DB_URI: "mongodb://root:pass@mongo:27017"
    networks:
      - database
    logging: *fluent-bit
    depends_on:
      mongo:
        condition: service_healthy # pre pokretanja ovog kontejnera treba prvo da se pokrene baza

  mongo:
    image: mongo
    container_name: mongo
    restart: unless-stopped
    networks:
      - database
    ports:
      - "27017:27017" # na pgAdmin-u se moze povezati na bazu na port 5433
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoDemo
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    logging: *fluent-bit
    volumes:
      - mongo_store:/data/db

  mongo-express:
    image: mongo-express
    restart: unless-stopped
    environment:
      - ME_CONFIG_SITE_PORT=8084
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=pass
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
      - ME_CONFIG_MONGODB_URL=mongodb://mongo:27017/
    links:
      - mongo
    depends_on:
      - mongo
    ports:
      - "8081:8081"
    networks:
      - database
    logging: *fluent-bit
    volumes:
      - mongo_express_data:/data/db

  stakeholders:
    build: Stakeholders/ # sam ce build-ovati prvi put, svaki drugi put ce koristiti postojecu sliku koju je build-ovao | PUTANJA DO DOCKEFILA-a
    image: stakeholders # naziv slike koju build-uje
    restart: always
    environment:
      STAKEHOLDERS_SERVICE_ADDRESS: ${STAKEHOLDERS_SERVICE_ADDRESS}
      DATABASE_URL: "host=stakeholdersdb user=postgres password=super dbname=SOA sslmode=disable"
      JAEGER_ENDPOINT: ${JAEGER_ENDPOINT}
    networks:
      - database
      - monitoring
    logging: *fluent-bit
    depends_on:
      - stakeholdersdb # pre pokretanja ovog kontejnera treba prvo da se pokrene baza

  stakeholdersdb:
    image: postgres
    container_name: stakeholders-database
    networks:
      - database
      - monitoring
    ports:
      - 5435:5432 # na pgAdmin-u se moze povezati na bazu na port 5433
    environment:
      - POSTGRES_DB=SOA
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=super
    logging: *fluent-bit
    volumes:
      - stakeholders-data:/var/lib/postgresql/data

  followings:
    build: Followings/
    image: followings
    restart: unless-stopped
    container_name: "following-server"
    hostname: "following-server"
    ports:
      - 8089:8089
    environment:
      - PORT=8089
      - NEO4J_DB=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASS=nekaSifra
    networks:
      - database
    logging: *fluent-bit
    depends_on:
      neo4j:
        condition: service_healthy

  neo4j:
    image: neo4j
    restart: always
    ports:
      - "7687:7687"
      - "7474:7474"
      - "7473:7473"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "echo RETURN 1 | cypher-shell -a bolt://neo4j:7687 -u neo4j -p nekaSifra || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - database
    environment:
      - NEO4J_AUTH=neo4j/nekaSifra
    logging: *fluent-bit
    volumes:
      - neo4j_data:/data

  greeter_service:
    image: greeter_service
    container_name: greeter_service
    hostname: greeter_service
    build: /greeter-service
    restart: always
    environment:
      GREETER_SERVICE_ADDRESS: ${GREETER_SERVICE_ADDRESS}
    logging: *fluent-bit
    networks:
      - database

  api_gateway:
    image: api_gateway
    container_name: api_gateway
    hostname: api_gateway
    build:
      context: /api-gateway
      dockerfile: Dockerfile
    restart: always
    environment:
      GREETER_SERVICE_ADDRESS: greeter_service:8000
      ENCOUNTER_SERVICE_ADDRESS: encounters:8083
      STAKEHOLDERS_SERVICE_ADDRESS: stakeholders:8082
      GATEWAY_ADDRESS: ${GATEWAY_ADDRESS}
    depends_on:
      - greeter_service
      - encounters
      - stakeholders
    networks:
      - database
    logging: *fluent-bit
    ports:
      - "8000:8000"

volumes:
  tours-data:
    driver: local
    name: tours-data
  stakeholders-data:
    driver: local
    name: stakeholders-data
  neo4j_data:
    driver: local
    name: neo4j-data
  mongo_store:
  mongo_express_data:

networks:
  database:
    name: database
    driver: bridge
  monitoring:
    external: true
