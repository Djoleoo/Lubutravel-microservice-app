syntax = "proto3";

option go_package = "proto/greeter";

import "google/api/annotations.proto";

service GreeterService {
  rpc Greet(Request) returns (Response) {
    option (google.api.http) = {
      post: "/"
      body: "*"
    };
  }

  rpc GreetTest(Request) returns (Response) {
    option (google.api.http) = {
      get: "/"
    };
  }
}

message Request {
  string name = 1;
}

message Response {
  string greeting = 2;
}

service EncounterService{
  rpc CreateEncounterRpc(CreateEncounterRequest) returns (CreateEncounterResponse) {
    option (google.api.http) = {
      post: "/api/encounter/createEncounter"
      body: "*"
    };
  }
  rpc GetAllEncountersRpc(GetAllEncountersRequest) returns (GetAllEncountersResponse){
    option (google.api.http) = {
      get: "/api/encounter/getAll"
    };
  }
  rpc GetEncounterByIDRpc(GetEncounterByIDRequest) returns (GetEncounterByIDResponse){
    option (google.api.http) = {
      get: "/api/encounter/getById/{id}"
    };
  }
}


service EncounterExecutionService {
    rpc CreateExecutionRpc(CreateExecutionRequest) returns(CreateExecutionResponse){
      option(google.api.http) = {
        post:"/api/encounterExecution/createExecution"
        body: "*"
      };
    }

    rpc GetAllExecutionsRpc(GetAllExecutionsRequest) returns (GetAllExecutionsResponse){
      option (google.api.http) = {
        get: "/api/encounterExecution/getAll"
      };
    }

    rpc GetExecutionByUserIDRpc(GetExecutionByUserIdRequest) returns (GetExecutionByUserIdResponse){
      option (google.api.http) = {
        get: "/api/encounterExecution/getByUserId/{userId}"
      };
    }
    
    rpc UpdateExecutionRpc(UpdateExecutionRequest) returns (UpdateExecutionResponse){
      option (google.api.http) = {
        put: "/api/encounterExecution/update/{userId}"
      };
    }


}

service StakeholderService {
    rpc RegistrationRpc(RegistrationRequest) returns (RegistrationResponse){
      option(google.api.http) = {
        post:"/api/stakeholders/registration"
        body: "*"
      };
    }

    rpc GetProfileRpc(GetProfileRequest) returns (GetProfileResponse){
      option (google.api.http) = {
        get: "/api/stakeholders/getProfile/{id}"
      };
    }

    rpc UpdateProfileRpc(UpdateProfileRequest) returns (UpdateProfileResponse){
      option (google.api.http) = {
      put: "/api/stakeholders/updateProfile"
      body:"*"
      };
    }

}

service AuthService {
  rpc LoginRpc(LoginRequest) returns (LoginResponse){
    option(google.api.http) = {
      post: "/api/auth/login"
      body: "*"
    };
  }
}


enum EncounterStatus {
  ACTIVE = 0;
  DRAFT = 1;
  ARCHIVED = 2;
}

enum EncounterType {
  SOCIAL = 0;
  LOCATION = 1;
  MISC = 2;
}

message Encounter {
  string id = 1;                      // Jedinstveni identifikator susreta.
  string name = 2;                    // Ime susreta.
  string description = 3;          // Opis susreta.
  int32 xp_points = 4;             // XP poeni susreta.
  EncounterStatus status = 5;  // Status susreta.
  EncounterType type = 6;          // Tip susreta.
  double latitude = 7;                // Geografska širina.
  double longitude = 8;             // Geografska dužina.
  bool should_be_approved = 9; // Da li susret treba da bude odobren.
}

message CreateEncounterRequest {
  string name = 1;                    // Ime susreta.
  string description = 2;         // Opis susreta.
  int32 xp_points = 3;             // XP poeni susreta.
  EncounterStatus status = 4; // Status susreta.
  EncounterType type = 5;        // Tip susreta.
  double latitude = 6;               // Geografska širina.
  double longitude = 7;            // Geografska dužina.
  bool should_be_approved = 8; // Da li susret treba da bude odobren.
}

// Poruka koja se koristi za odgovor na zahtev za kreiranje susreta.
message CreateEncounterResponse {
  Encounter encounter = 1; // Kreirani susret.
}

//GET ALL
message GetAllEncountersRequest {
  // Možemo dodati neke parametre ako je potrebno
}

message GetAllEncountersResponse {
  repeated Encounter encounters = 1;
}

//GETBYID
message GetEncounterByIDRequest {
    string id = 1; // Jedinstveni identifikator susreta
}

message GetEncounterByIDResponse {
    Encounter encounter = 1; // Susret koji je pronađen
}

//=====================================================================================

message EncounterExecution {
    string id = 1;                       // Jedinstveni identifikator izvršenja susreta.
    int64 user_id = 2;                   // ID korisnika.
    string encounter_id = 3;             // ID susreta.
    string completion_time = 4;          // Vreme završetka izvršenja.
    bool is_completed = 5;               // Da li je izvršenje završeno.
}

message CreateExecutionRequest {
    int64 user_id = 1;                // ID korisnika.
    string encounter_id = 2;           // ID susreta.
    string completion_time = 3;      // Vreme završetka susreta (u formatu koji vam odgovara).
    bool is_completed = 4;             // Da li je susret završen.W
}

message CreateExecutionResponse {
  EncounterExecution execution = 1; // Kreirani susret.
}

//GETALL
message GetAllExecutionsRequest {
  // Možemo dodati neke parametre ako je potrebno
}

message GetAllExecutionsResponse {
  repeated EncounterExecution executions = 1;
}

message GetExecutionByUserIdRequest{
  string userId = 1;
}

message GetExecutionByUserIdResponse{
  EncounterExecution execution = 1;
}

message UpdateExecutionRequest{
    string userId = 1;
}

message UpdateExecutionResponse{
}

//=========================================================================
enum UserRole {
    administrator = 0;
    tourist = 1;
    author = 2;
}

message User {
    uint64 id = 1;  // gorm.Model id polje
    string created_at = 2;  // gorm.Model created_at polje
    string updated_at = 3;  // gorm.Model updated_at polje
    string deleted_at = 4;  // gorm.Model deleted_at polje
    string username = 5;  // UserName polje
    string password = 6;  // Password polje
    UserRole role = 7;  // Role polje
    bool is_active = 8;  // IsActive polje
    string verification_token = 9;  // VerificationToken polje
    Person person = 10;  // Person polje
}

message Person {
    uint64 id = 1;  // gorm.Model id polje
    uint32 user_id = 2;  // UserID polje
    string name = 3;  // Name polje
    string surname = 4;  // Surname polje
    string profile_image = 5;  // Image polje
    string email = 6;  // Email polje
    string bio = 7;  // Bio polje
    string quote = 8;  // Quote polje
}

message RegistrationRequest {
    string username = 1;  // Username polje
    string password = 2;  // Password polje
    string email = 3;  // Email polje
    string name = 4;  // Name polje
    string surname = 5;  // Surname polje
    string role = 6;  // Role polje
}

message RegistrationResponse{
    string message = 1;
}

message GetProfileRequest {
    string id = 1;
}

message GetProfileResponse{
    Person person = 1;
}

message UpdateProfileRequest {
    uint64 id = 1;  // gorm.Model id polje
    uint32 user_id = 2;  // UserID polje
    string name = 3;  // Name polje
    string surname = 4;  // Surname polje
    string profile_image = 5;  // Image polje
    string email = 6;  // Email polje
    string bio = 7;  // Bio polje
    string quote = 8;  // Quote polje
}

message UpdateProfileResponse {
    Person person = 1;
}

message LoginRequest {
    string username = 1;
    string password = 2;
}

message LoginResponse {
    uint64 id = 1;
    string access_token = 2;
}

